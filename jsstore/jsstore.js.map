{"version":3,"sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/./src/main/index.ts","webpack://JsStore/./src/main/instance.ts","webpack://JsStore/./src/main/enums.ts","webpack://JsStore/./src/main/instance_helper.ts","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/main/config.ts","webpack://JsStore/./src/main/util.ts","webpack://JsStore/./src/main/helper.ts","webpack://JsStore/./src/main/model/index.ts","webpack://JsStore/./src/main/model/column.ts","webpack://JsStore/./src/main/global.ts"],"names":[],"mappings":"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","file":"jsstore.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export * from './instance';\r\nexport * from './enums';\r\nexport * from './config';\r\nexport * from './helper';\r\nexport * from './types';\r\nexport * from './model/index';\r\nexport * from './global';\r\nexport * from './interfaces';","import { API } from \"./enums\";\r\nimport { InstanceHelper } from \"./instance_helper\";\r\nimport {\r\n    SelectQuery, CountQuery, InsertQuery,\r\n    UpdateQuery, RemoveQuery, DbInfo, TranscationQuery\r\n} from \"./types\";\r\nimport { Config } from \"./config\";\r\nimport { SetQuery } from \"../worker/types\";\r\nimport { Util } from \"./util\";\r\nimport { IDataBase } from \"./interfaces\";\r\n\r\nexport class Instance extends InstanceHelper {\r\n\r\n    constructor(worker?: Worker) {\r\n        super(worker);\r\n    }\r\n\r\n    /**\r\n     *  open database\r\n     * \r\n     * @param {string} dbName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    openDb(dbName: string) {\r\n        return this.pushApi<null>({\r\n            name: API.OpenDb,\r\n            query: dbName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * creates DataBase\r\n     * \r\n     * @param {IDataBase} dataBase \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    createDb(dataBase: IDataBase) {\r\n        return this.pushApi<string[]>({\r\n            name: API.CreateDb,\r\n            query: dataBase\r\n        });\r\n    }\r\n\r\n    /**\r\n     * drop dataBase\r\n     * \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    dropDb() {\r\n        return this.pushApi<null>({\r\n            name: API.DropDb,\r\n            query: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * select data from table\r\n     * \r\n     * @template T \r\n     * @param {SelectQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    select<T>(query: SelectQuery) {\r\n        return this.pushApi<T[]>({\r\n            name: API.Select,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get no of record from table\r\n     * \r\n     * @param {CountQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    count(query: CountQuery) {\r\n        return this.pushApi<number>({\r\n            name: API.Count,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * insert data into table\r\n     * \r\n     * @param {InsertQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    insert<T>(query: InsertQuery) {\r\n        return this.pushApi<number | T[]>({\r\n            name: API.Insert,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update data into table\r\n     * \r\n     * @param {UpdateQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    update(query: UpdateQuery) {\r\n        return this.pushApi<number>({\r\n            name: API.Update,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * remove data from table\r\n     * \r\n     * @param {RemoveQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    remove(query: RemoveQuery) {\r\n        return this.pushApi<number>({\r\n            name: API.Remove,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * delete all data from table\r\n     * \r\n     * @param {string} tableName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    clear(tableName: string) {\r\n        return this.pushApi<null>({\r\n            name: API.Clear,\r\n            query: tableName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * insert bulk amount of data\r\n     * \r\n     * @param {InsertQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    bulkInsert(query: InsertQuery) {\r\n        return this.pushApi<null>({\r\n            name: API.BulkInsert,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  export the result in json file\r\n     * \r\n     * @param {SelectQuery} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    exportJson(query: SelectQuery) {\r\n        const onSuccess = (url) => {\r\n            const link = document.createElement(\"a\");\r\n            link.href = url;\r\n            link.download = query.from + \".json\";\r\n            link.click();\r\n        };\r\n\r\n        return new Promise<null>((resolve, reject) => {\r\n            this.pushApi({\r\n                name: API.ExportJson,\r\n                query: query\r\n            }).then(url => {\r\n                onSuccess(url);\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set log status\r\n     * \r\n     * @param {boolean} status \r\n     * @memberof Instance\r\n     */\r\n    setLogStatus(status: boolean) {\r\n        Config.isLogEnabled = status ? status : Config.isLogEnabled;\r\n        this.pushApi({\r\n            name: API.ChangeLogStatus,\r\n            query: Config.isLogEnabled\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get version of database\r\n     * \r\n     * @param {(string | DbInfo)} dbName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    getDbVersion(dbName: string | DbInfo) {\r\n        return this.pushApi<number>({\r\n            name: API.GetDbVersion,\r\n            query: dbName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * is database exist\r\n     * \r\n     * @param {(DbInfo | string)} dbInfo \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    isDbExist(dbInfo: DbInfo | string) {\r\n        return this.pushApi<boolean>({\r\n            name: API.IsDbExist,\r\n            query: dbInfo\r\n        });\r\n    }\r\n\r\n    /**\r\n     * returns list of database created\r\n     * \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    getDbList() {\r\n        return this.pushApi<string[]>({\r\n            name: API.GetDbList,\r\n            query: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get Database Schema\r\n     * \r\n     * @param {string} dbName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    getDbSchema(dbName: string) {\r\n        return this.pushApi<IDataBase>({\r\n            name: API.GetDbSchema,\r\n            query: dbName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the value from keystore table\r\n     * \r\n     * @param {string} key \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    get(key: string) {\r\n        return this.pushApi<any>({\r\n            name: API.Get,\r\n            query: key\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set the value in keystore table \r\n     * \r\n     * @param {string} key \r\n     * @param {*} value \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    set(key: string, value: any) {\r\n        return this.pushApi<any>({\r\n            name: API.Set,\r\n            query: {\r\n                key: key, value: value\r\n            } as SetQuery\r\n        });\r\n    }\r\n\r\n    /**\r\n     * terminate the connection\r\n     *\r\n     * @returns\r\n     * @memberof Instance\r\n     */\r\n    terminate() {\r\n        return this.pushApi<any>({\r\n            name: API.Terminate,\r\n            query: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * execute the transaction\r\n     *\r\n     * @param {TranscationQuery} query\r\n     * @returns\r\n     * @memberof Instance\r\n     */\r\n    transaction(query: TranscationQuery) {\r\n        (query.logic as any) = query.logic.toString();\r\n        return this.pushApi<any>({\r\n            name: API.Transaction,\r\n            query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * run sql code\r\n     *\r\n     * @param {(string | object)} query\r\n     * @returns {Promise<any>}\r\n     * @memberof Instance\r\n     */\r\n    runSql(query: string | object): Promise<any> {\r\n        const result = Util.sqlWeb.parseSql(query);\r\n        return this[result.api](result.data);\r\n    }\r\n}","export enum ERROR_TYPE {\r\n    WorkerNotSupplied = \"worker_not_supplied\",\r\n    IndexedDbUndefined = \"indexeddb_undefined\"\r\n}\r\n\r\nexport enum WORKER_STATUS {\r\n    Registered = \"registerd\",\r\n    Failed = \"failed\",\r\n    NotStarted = \"not_started\"\r\n}\r\n\r\nexport enum DATA_TYPE {\r\n    String = \"string\",\r\n    Object = \"object\",\r\n    Array = \"array\",\r\n    Number = \"number\",\r\n    Boolean = \"boolean\",\r\n    Null = \"null\",\r\n    DateTime = \"date_time\"\r\n}\r\n\r\nexport enum COL_OPTION {\r\n    PrimaryKey = \"primary_key\",\r\n    AutoIncrement = \"auto_increment\",\r\n    Unique = \"unique\",\r\n    NotNull = \"not_null\",\r\n    MultiEntry = \"multi_entry\"\r\n}\r\n\r\nexport enum API {\r\n    CreateDb = \"create_db\",\r\n    IsDbExist = \"is_db_exist\",\r\n    GetDbVersion = \"get_db_version\",\r\n    GetDbList = \"get_db_list\",\r\n    Get = \"get\",\r\n    Set = \"set\",\r\n    Select = \"select\",\r\n    Insert = \"insert\",\r\n    Update = \"update\",\r\n    Remove = \"remove\",\r\n    GetDbSchema = \"get_db_schema\",\r\n    OpenDb = \"open_db\",\r\n    Clear = \"clear\",\r\n    DropDb = \"drop_db\",\r\n    Count = \"count\",\r\n    BulkInsert = \"bulk_insert\",\r\n    ExportJson = \"export_json\",\r\n    ChangeLogStatus = \"change_log_status\",\r\n    Terminate = \"terminate\",\r\n    Transaction = \"transaction\"\r\n}","import { LogHelper } from \"./log_helper\";\r\nimport { ERROR_TYPE, API } from \"./enums\";\r\nimport { WebWorkerRequest, WebWorkerResult } from \"./types\";\r\nimport { Config } from \"./config\";\r\n\r\ndeclare var JsStoreWorker;\r\n\r\nexport class InstanceHelper {\r\n  private worker_: Worker;\r\n  private isDbOpened_ = false;\r\n  private requestQueue_: WebWorkerRequest[] = [];\r\n  private isCodeExecuting_ = false;\r\n  private queryExecutor_;\r\n  private whiteListApi_ = [\r\n    API.CreateDb,\r\n    API.IsDbExist,\r\n    API.GetDbVersion,\r\n    API.GetDbList,\r\n    API.OpenDb,\r\n    API.GetDbSchema,\r\n    API.Get,\r\n    API.Set,\r\n    API.ChangeLogStatus,\r\n    API.Terminate\r\n  ];\r\n\r\n  constructor(worker?: Worker) {\r\n    if (worker) {\r\n      this.worker_ = worker;\r\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\r\n    } else {\r\n      Config.isRuningInWorker = false;\r\n      this.queryExecutor_ = new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this));\r\n    }\r\n  }\r\n\r\n  private onMessageFromWorker_(msg) {\r\n    this.processFinishedQuery_(msg.data);\r\n  }\r\n\r\n  private processFinishedQuery_(message: WebWorkerResult) {\r\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\r\n    if (finishedRequest) {\r\n      LogHelper.log(\"request finished : \" + finishedRequest.name);\r\n      if (message.errorOccured) {\r\n        if (finishedRequest.onError) {\r\n          finishedRequest.onError(message.errorDetails);\r\n        }\r\n      } else {\r\n        if (finishedRequest.onSuccess) {\r\n          const openDbQueries = [\"open_db\", \"create_db\"];\r\n          if (openDbQueries.indexOf(finishedRequest.name) >= 0) {\r\n            this.isDbOpened_ = true;\r\n          }\r\n          finishedRequest.onSuccess(message.returnedValue);\r\n        }\r\n      }\r\n      this.isCodeExecuting_ = false;\r\n      this.executeQry_();\r\n    }\r\n  }\r\n\r\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      request.onSuccess = result => {\r\n        resolve(result as T);\r\n      };\r\n      request.onError = error => {\r\n        reject(error);\r\n      };\r\n      this.prcoessExecutionOfQry_(request);\r\n    });\r\n  }\r\n\r\n  private prcoessExecutionOfQry_(request: WebWorkerRequest) {\r\n    this.requestQueue_.push(request);\r\n    this.executeQry_();\r\n    LogHelper.log(\"request pushed: \" + request.name);\r\n  }\r\n\r\n  private executeQry_() {\r\n    if (!this.isCodeExecuting_ && this.requestQueue_.length > 0) {\r\n      if (this.isDbOpened_) {\r\n        this.sendRequestToWorker_(this.requestQueue_[0]);\r\n        return;\r\n      }\r\n\r\n      const allowedQueryIndex = this.requestQueue_.findIndex(\r\n        item => this.whiteListApi_.indexOf(item.name) >= 0\r\n      );\r\n\r\n      // shift allowed query to zeroth index\r\n      if (allowedQueryIndex >= 0) {\r\n        this.requestQueue_.splice(\r\n          0,\r\n          0,\r\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\r\n        );\r\n        this.sendRequestToWorker_(this.requestQueue_[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private sendRequestToWorker_(request: WebWorkerRequest) {\r\n    this.isCodeExecuting_ = true;\r\n    LogHelper.log(\"request executing : \" + request.name);\r\n    if (request.name === API.Terminate) {\r\n      if (Config.isRuningInWorker === true) {\r\n        this.worker_.terminate();\r\n      }\r\n      this.isDbOpened_ = false;\r\n      this.processFinishedQuery_({\r\n        returnedValue: null\r\n      } as any);\r\n    }\r\n    else {\r\n      const requestForWorker = {\r\n        name: request.name,\r\n        query: request.query\r\n      } as WebWorkerRequest;\r\n      if (Config.isRuningInWorker === true) {\r\n        this.worker_.postMessage(requestForWorker);\r\n      }\r\n      else {\r\n        this.queryExecutor_.checkConnectionAndExecuteLogic(requestForWorker);\r\n      }\r\n    }\r\n  }\r\n}\r\n","\r\nimport { ERROR_TYPE } from \"./enums\";\r\nimport { Config } from \"./config\";\r\nimport { IError } from \"./interfaces\";\r\n\r\nexport class LogHelper implements IError {\r\n    type: ERROR_TYPE;\r\n    message: string;\r\n    private _info: any;\r\n\r\n    constructor(type: ERROR_TYPE, info: any = null) {\r\n        this.type = type;\r\n        this._info = info;\r\n        this.message = this.getMsg();\r\n    }\r\n\r\n    throw() {\r\n        throw this.get();\r\n    }\r\n\r\n    static log(msg) {\r\n        if (Config.isLogEnabled) {\r\n            console.log(msg);\r\n        }\r\n    }\r\n\r\n    logError() {\r\n        console.error(this.get());\r\n    }\r\n\r\n    logWarning() {\r\n        console.warn(this.get());\r\n    }\r\n\r\n    get() {\r\n        return {\r\n            message: this.message,\r\n            type: this.type\r\n        } as IError;\r\n    }\r\n\r\n    private getMsg() {\r\n        let errMsg: string;\r\n        switch (this.type) {\r\n            case ERROR_TYPE.WorkerNotSupplied:\r\n                errMsg = \"Worker object is not passed in instance constructor\";\r\n                break;\r\n            case ERROR_TYPE.IndexedDbUndefined:\r\n                errMsg = \"Browser does not support indexeddb\";\r\n                break;\r\n            default:\r\n                errMsg = this.message;\r\n                break;\r\n        }\r\n        return errMsg;\r\n    }\r\n}","export class Config {\r\n    static isLogEnabled = false;\r\n    static isRuningInWorker = true;\r\n}","import { ISqlWeb } from \"./interfaces\";\r\n\r\n\r\nexport class Util {\r\n    private static sqlWeb_: ISqlWeb;\r\n\r\n    static get sqlWeb() {\r\n        return Util.sqlWeb_ == null ? window['SqlWeb'] : Util.sqlWeb_;\r\n    }\r\n\r\n    static set sqlWeb(value) {\r\n        Util.sqlWeb_ = value;\r\n    }\r\n\r\n\r\n}","import { Config } from \"./config\";\r\n\r\n/**\r\n * Enable log\r\n * \r\n */\r\nexport const enableLog = () => {\r\n    Config.isLogEnabled = true;\r\n};\r\n\r\n","export * from './column';","import { DATA_TYPE, COL_OPTION } from \"../enums\";\r\nimport { IColumn } from \"../interfaces\";\r\n\r\nexport class Column implements IColumn {\r\n    name: string;\r\n    primaryKey: boolean;\r\n    autoIncrement: boolean;\r\n    unique: boolean;\r\n    notNull: boolean;\r\n    dataType: string;\r\n    default: any;\r\n    multiEntry: boolean;\r\n    enableSearch: boolean;\r\n\r\n    keyPath: string[];\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    options(columnOptions: COL_OPTION[]) {\r\n        columnOptions.forEach(option => {\r\n            switch (option) {\r\n                case COL_OPTION.AutoIncrement:\r\n                    this.autoIncrement = true;\r\n                    break;\r\n                case COL_OPTION.MultiEntry:\r\n                    this.multiEntry = true;\r\n                    break;\r\n                case COL_OPTION.NotNull:\r\n                    this.notNull = true;\r\n                    break;\r\n                case COL_OPTION.PrimaryKey:\r\n                    this.primaryKey = true;\r\n                    break;\r\n                case COL_OPTION.Unique:\r\n                    this.unique = true;\r\n                    break;\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    setDataType(type: DATA_TYPE) {\r\n        this.dataType = type; return this;\r\n    }\r\n\r\n    setDefault(value) {\r\n        this.default = value; return this;\r\n    }\r\n\r\n    disableSearch() {\r\n        this.enableSearch = false;\r\n        return this;\r\n    }\r\n}","import { Util } from \"./util\";\r\n\r\n/**\r\n *\r\n * supply sqlweb\r\n * @param {*} value\r\n */\r\nexport const useSqlWeb = (value) => {\r\n    Util.sqlWeb = value;\r\n};\r\n"],"sourceRoot":""}